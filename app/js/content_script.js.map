{"version":3,"sources":["content_script.js"],"names":["parseUri","str","o","m","options","exec","uri","i","key","name","replace","q","parser","$0","$1","$2","get_FbAdLinks","posts","document","getElementsByClassName","ad_posts","Array","from","filter","post","ads_arr","map","style","border","post_info","querySelector","parsed_ad","href","advertiser_name","textContent","ad_obj","processAd","feed_info","num_posts","length","ad","advertiser","hasOwnProperty","isPlaced","queryKey","parseInt","checkIfFacebook","url","link","protocol","host","includes","getLinks","isFb","URL","chrome","storage","local","set","addEventListener","num_ads","ads","toString","runtime","sendMessage","subject","badge_num","strictMode","strict"],"mappings":"AAAA,cACA,WA+BE,QAAAA,GAAAC,GAOE,IANF,GAAAC,GAASF,EAASC,QAChBE,EAAID,EAAIF,OAAAA,EAASI,WAAjB,SAAA,SAAAC,KAAAJ,GAAAK,KAAAC,EAEED,GAGKC,KAAKD,EAAIJ,EAAEM,IAAID,IAAMJ,EAAEI,IAAM,EAOpC,OAPYD,GAAAA,EAAIJ,EAAEM,SAAlBF,EAEAA,EAAIJ,IAAIO,KAARC,QAAAR,EAAAS,EAAAC,OAAA,SAAAC,EAAAC,EAAAC,GACMP,IAAIF,EAAVJ,EAAeQ,EAAAA,MAAQR,GAAIU,KAIpBN,EAeT,QAAAU,KAEE,GAAAC,GAAAC,SAAAC,uBAAA,yBAEAC,EAAAC,MAAAC,KAAAL,GAAAM,OAAA,SAAAC,GACA,MAAIJ,GAAAA,cAAsBH,kBAG1BQ,EAAAL,EAAAM,IAAA,SAAAF,GAEEA,EAAAG,MAAAC,OAAA,mBAEA,IAAAC,GAAAL,EAAAM,cAAA,+BAEAC,EAAA/B,EAAA6B,EAAAG,MAEAC,EAAAT,EAAAM,cAAA,kBAAAN,EAAAM,cAAA,kBAAAI,YAAA,GAEAC,EAAAC,EAAAL,EAAAE,EAEA,OAAAE,KAGFE,GACAC,UAAID,EAAYE,OACdD,IAAAA,EAIF,OAAOD,GAET,QAAAD,GAAAI,EAAAC,GACA,GAAAN,IACEM,WAAeA,EACbA,SAAAA,EAAYA,SADCC,eAAA,0BAEbC,UAAUH,EAAGI,SAASF,0BAAeG,SAFxBL,EAAAI,SAAA,0BAAA,IAAA,EAAA,EAAA,OAAfT,GAOF,QAAAW,GAAAC,GAEE,GAAAC,GAAAhD,EAAA+C,EAEA,SAAA,UAAAC,EAAAC,WAAAD,EAAAE,KAAAC,SAAA,iBAOF,QAAAC,GAAAL,GAEE,GAAAM,GAAAP,EAAAC,EACA,SAAIM,GACJrC,IAlHFE,SAAAoC,IAAAH,SAAA,gBACIjC,SAASoC,eAAa,mBAEtBC,OAAAC,QAAAC,MAAAC,KACAH,QAAOC,IAGPtC,SAAAyC,iBAAA,SAAA,WAEE,GAAAtB,GAAAe,EAAAlC,SAAAoC,KAEAM,EAAAvB,EAAAA,EAAAwB,IAAAtB,OAAAuB,WAAA,GAEAP,QAAAQ,QAAAC,aACAT,KAAOQ,iBACLzC,QAAM,YACN2C,UAASL,EACTM,QAAAA,OAMNX,OAAAQ,QAAAC,aACAT,KAAOQ,iBACLzC,QAAM,YACN2C,UAAS,MAqBbjE,EAASI,SAATJ,YAASI,EACP+D,KAAAA,SAAY,WADK,YAAA,WAAA,OAAA,WAAA,OAAA,OAAA,WAAA,OAAA,YAAA,OAAA,QAAA,UAEjB3D,GACAG,KAAG,WACDF,OAAM,6BADLG,QAIHA,OAAQ,0IACNwD,MAAAA","file":"content_script.js","sourcesContent":["'use strict';\n(function() {\n  // CHECK IF CURRENT PAGE IS FACEBOOK\n  if (document.URL.includes('facebook.com')) {\n    if (document.getElementById('mainContainer')) {\n      // SET OR RESET STORED DATA TRACKING SUBMISSIONS TO DATABASE\n      chrome.storage.local.set({\n        num_ads: 0\n      });\n      // UPDATE DATA AS FACEBOOK LOADS MORE ADS/POSTS ON SCROLL\n      document.addEventListener('scroll', function() {\n        // PROCESS ADS/POSTS\n        var feed_info = getLinks(document.URL);\n        // PARSE NUMBER OF ADS TO APPEAR IN EXTENSION BADGE\n        var num_ads = feed_info ? feed_info.ads.length.toString() : '0';\n        // SEND DATA TO EVENT PAGE (BACKGROUND.JS)\n        chrome.runtime.sendMessage({\n          from: 'content_script',\n          subject: 'postLinks',\n          badge_num: num_ads,\n          ad_data: feed_info\n        });\n      });\n    }\n  } else {\n    // SET BADGE NUMBER TO 0 IF NOT FACEBOOK\n    chrome.runtime.sendMessage({\n      from: 'content_script',\n      subject: 'postLinks',\n      badge_num: '0'\n    });\n  }\n  // CONVERT LINK INTO PARSEABLE OBJECT\n  function parseUri(str) {\n    var o = parseUri.options,\n      m = o.parser[o.strictMode ? \"strict\" : \"loose\"].exec(str),\n      uri = {},\n      i = 14;\n\n    while (i--) uri[o.key[i]] = m[i] || \"\";\n\n    uri[o.q.name] = {};\n    uri[o.key[12]].replace(o.q.parser, function($0, $1, $2) {\n      if ($1) uri[o.q.name][$1] = $2;\n    });\n\n    return uri;\n  }\n\n  parseUri.options = {\n    strictMode: false,\n    key: [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\", \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"],\n    q: {\n      name: \"queryKey\",\n      parser: /(?:^|&)([^&=]*)=?([^&]*)/g\n    },\n    parser: {\n      strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n      loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/\n    }\n  };\n  // PROCESS ADS/POSTS\n  function get_FbAdLinks() {\n    // GET LIST OF ALL POSTS IN FEED, INCLUDING ADS\n    var posts = document.getElementsByClassName('_4-u2 mbm _5v3q _4-u8');\n    // FILTER POSTS LISTS FOR ADS\n    var ad_posts = Array.from(posts).filter(function(post) {\n      return post.querySelector('a._3e_2._m8c');\n    });\n    // PROCESS ADS\n    var ads_arr = ad_posts.map(function(post) {\n      // HIGHLIGHT ADS IN FEED\n      post.style.border = '4px solid #FF8080';\n      // GET CHILD THAT CONTAINS AD INFO\n      var post_info = post.querySelector('a._5pb8._8o._8s.lfloat._ohe');\n      // GET FEED PLACEMENT INFO FROM THAT CHILD\n      var parsed_ad = parseUri(post_info.href);\n      // GET ADVERTISER NAME FROM THAT CHILD\n      var advertiser_name = (post.querySelector('span.fwb.fcg a')) ? post.querySelector('span.fwb.fcg a').textContent : '';\n      // SEND FEED PLACEMENT INFO AND ADVERTISER NAME FOR PROCESSING\n      var ad_obj = processAd(parsed_ad, advertiser_name);\n      // ADD PROCESSED AD OBJECT TO ARRAY\n      return ad_obj;\n    });\n    // CONVERT DATA INTO OBJECT: NUM_POSTS FOR BADGE AND AD LOAD, ADS FOR ITEMIZED LIST IN POPUP\n    var feed_info = {\n      num_posts: posts.length,\n      ads: ads_arr\n    };\n\n    return feed_info;\n  }\n  // CONVERT AD DATA INTO OBJECT FOR ITEMIZED LIST IN POPUP\n  function processAd(ad, advertiser) {\n    const ad_obj = {\n      advertiser: advertiser,\n      isPlaced: ad.queryKey.hasOwnProperty('ft[insertion_position]'),\n      placement: (ad.queryKey['ft[insertion_position]']) ? parseInt(ad.queryKey['ft[insertion_position]'], 10) + 1 : 0\n    }\n    return ad_obj;\n  }\n  // CHECK THAT GETTING LINKS FOR FACEBOOK. WILL BE MODIFIED ONCE TWITTER ADDED TO EXTENSION\n  function checkIfFacebook(url) {\n    // CONVERT LINK INTO OBJECT\n    var link = parseUri(url);\n    // CHECK THAT LINK IS FOR SECURE FACEBOOK SITE\n    if ((link.protocol === 'https') && link.host.includes('facebook.com')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  // GRAB AD/POST DATA\n  function getLinks(url) {\n    // VERIFY THAT CHECKING FOR FACEBOOK. WILL BE MODIFIED ONCE TWITTER ADDED\n    var isFb = checkIfFacebook(url);\n    if (isFb) {\n      return get_FbAdLinks();\n    } else {\n      return false;\n    }\n  }\n})();\n"]}